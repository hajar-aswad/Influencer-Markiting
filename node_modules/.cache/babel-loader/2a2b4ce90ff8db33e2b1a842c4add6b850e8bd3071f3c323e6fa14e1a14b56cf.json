{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ASUS/Desktop/New folder/influincer_markiting/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ASUS/Desktop/New folder/influincer_markiting/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport axios from 'axios';\nexport default {\n  name: 'CampaignList',\n  data: function data() {\n    return {\n      campaigns: [],\n      campaign: {\n        campaign_name: '',\n        campaign_description: '',\n        campaign_objective: '',\n        campaign_budget: '',\n        start_date: '',\n        end_date: ''\n      }\n    };\n  },\n  methods: {\n    // Fetch campaigns\n    fetchCampaigns: function fetchCampaigns() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var token, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              token = localStorage.getItem('access_token');\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get('https://iinfluencer.net/api/campaign', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 4:\n              response = _context.sent;\n              _this.campaigns = response.data;\n              _context.next = 11;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('Failed to fetch campaigns', _context.t0);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 8]]);\n      }))();\n    },\n    // Get Influencer Names\n    getInfluencerNames: function getInfluencerNames(influencers) {\n      return influencers.map(function (influencer) {\n        return influencer.name;\n      }).join(', ');\n    },\n    // Save a new campaign\n    saveCampaign: function saveCampaign() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var token;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              token = localStorage.getItem('access_token');\n              _context2.prev = 1;\n              _context2.next = 4;\n              return axios.post('https://iinfluencer.net/api/campaign/store', _this2.campaign, {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 4:\n              _this2.fetchCampaigns(); // Refresh the list after adding\n              _this2.resetForm(); // Reset the form fields\n              _context2.next = 11;\n              break;\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error('Failed to save campaign', _context2.t0);\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 8]]);\n      }))();\n    },\n    // Delete a campaign\n    deleteCampaign: function deleteCampaign(id) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var token;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              token = localStorage.getItem('access_token');\n              _context3.prev = 1;\n              _context3.next = 4;\n              return axios[\"delete\"](\"https://iinfluencer.net/api/campaign/delete/\".concat(id), {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 4:\n              _this3.fetchCampaigns(); // Refresh the list after deletion\n              _context3.next = 10;\n              break;\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error('Failed to delete campaign', _context3.t0);\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[1, 7]]);\n      }))();\n    },\n    // Reset the form after saving\n    resetForm: function resetForm() {\n      this.campaign = {\n        campaign_name: '',\n        campaign_description: '',\n        campaign_objective: '',\n        campaign_budget: '',\n        start_date: '',\n        end_date: ''\n      };\n    }\n  },\n  mounted: function mounted() {\n    this.fetchCampaigns();\n  }\n};","map":{"version":3,"names":["axios","name","data","campaigns","campaign","campaign_name","campaign_description","campaign_objective","campaign_budget","start_date","end_date","methods","fetchCampaigns","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","response","wrap","_callee$","_context","prev","next","localStorage","getItem","get","headers","Authorization","concat","sent","t0","console","error","stop","getInfluencerNames","influencers","map","influencer","join","saveCampaign","_this2","_callee2","_callee2$","_context2","post","resetForm","deleteCampaign","id","_this3","_callee3","_callee3$","_context3","mounted"],"sources":["C:\\Users\\ASUS\\Desktop\\New folder\\influincer_markiting\\src\\components\\CampaignList.vue"],"sourcesContent":["<template>\r\n  <div class=\"content-container\">\r\n    <!-- Campaigns Table Section -->\r\n    <div class=\"table-section\">\r\n      <div class=\"table-container\">\r\n        <div class=\"product-table\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Campaign Name</th>\r\n                <th>Description</th>\r\n                <th>Objective</th>\r\n                <th>Budget</th>\r\n                <th>Start Date</th>\r\n                <th>End Date</th>\r\n                <th>Influencer Name</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(campaign, index) in campaigns\" :key=\"index\">\r\n                <td>{{ campaign.campaign.campaign_name }}</td>\r\n                <td>{{ campaign.campaign.campaign_description }}</td>\r\n                <td>{{ campaign.campaign.campaign_objective }}</td>\r\n                <td>{{ campaign.campaign.campaign_budget }}</td>\r\n                <td>{{ campaign.campaign.start_date }}</td>\r\n                <td>{{ campaign.campaign.end_date }}</td>\r\n                <td>{{ getInfluencerNames(campaign.influencers) }}</td>\r\n                <td>\r\n                  <button class=\"delete-button\" @click=\"deleteCampaign(campaign.campaign.id)\">üóëÔ∏è</button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Add/Update Campaign Section -->\r\n    <div class=\"form-section\">\r\n      <div class=\"add-product-form\"> \r\n          <h3>Start New Campaign</h3>\r\n\r\n          <form @submit.prevent=\"saveCampaign\">\r\n              <div class=\"input-group\">\r\n            <input type=\"text\" v-model=\"campaign.campaign_name\" placeholder=\"Campaign Name\" required />\r\n          </div>\r\n          <div class=\"input-group\">\r\n            <input type=\"text\" v-model=\"campaign.campaign_description\" placeholder=\"Campaign Description\" required />\r\n          </div>\r\n          <div class=\"input-group\">\r\n            <input type=\"text\" v-model=\"campaign.campaign_objective\" placeholder=\"Campaign Objective\" required />\r\n          </div>\r\n          <div class=\"input-group\">\r\n            <input type=\"number\" v-model=\"campaign.campaign_budget\" placeholder=\"Campaign Budget\" required />\r\n          </div>\r\n          <div class=\"input-group\">\r\n            <input type=\"date\" v-model=\"campaign.start_date\" placeholder=\"Start Date\" required />\r\n          </div>\r\n          <div class=\"input-group\">\r\n            <input type=\"date\" v-model=\"campaign.end_date\" placeholder=\"End Date\" required />\r\n          </div> \r\n          <button type=\"submit\" class=\"add-product-button\">Start</button>\r\n\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>  \r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'CampaignList',\r\n  data() {\r\n    return {\r\n      campaigns: [],\r\n      campaign: {\r\n        campaign_name: '',\r\n        campaign_description: '',\r\n        campaign_objective: '',\r\n        campaign_budget: '',\r\n        start_date: '',\r\n        end_date: ''\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    // Fetch campaigns\r\n    async fetchCampaigns() {\r\n      const token = localStorage.getItem('access_token');\r\n      try {\r\n        const response = await axios.get('https://iinfluencer.net/api/campaign', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n        this.campaigns = response.data;\r\n      } catch (error) {\r\n        console.error('Failed to fetch campaigns', error);\r\n      }\r\n    },\r\n    \r\n    // Get Influencer Names\r\n    getInfluencerNames(influencers) {\r\n      return influencers.map(influencer => influencer.name).join(', ');\r\n    },\r\n\r\n    // Save a new campaign\r\n    async saveCampaign() {\r\n  const token = localStorage.getItem('access_token');\r\n  try {\r\n    await axios.post('https://iinfluencer.net/api/campaign/store', this.campaign, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    this.fetchCampaigns(); // Refresh the list after adding\r\n    this.resetForm(); // Reset the form fields\r\n  } catch (error) {\r\n    console.error('Failed to save campaign', error);\r\n  }\r\n}\r\n,\r\n\r\n    // Delete a campaign\r\n    async deleteCampaign(id) {\r\n      const token = localStorage.getItem('access_token');\r\n      try {\r\n        await axios.delete(`https://iinfluencer.net/api/campaign/delete/${id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n        this.fetchCampaigns(); // Refresh the list after deletion\r\n      } catch (error) {\r\n        console.error('Failed to delete campaign', error);\r\n      }\r\n    },\r\n\r\n    // Reset the form after saving\r\n    resetForm() {\r\n      this.campaign = {\r\n        campaign_name: '',\r\n        campaign_description: '',\r\n        campaign_objective: '',\r\n        campaign_budget: '',\r\n        start_date: '',\r\n        end_date: ''\r\n      };\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchCampaigns();\r\n  }\r\n};\r\n</script>\r\n\r\n  <style scoped>\r\n  @import \"@/assets/css/tablesandframe.css\";\r\n\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}